{"version":3,"sources":["components/spinner.gif","reducers/weatherReducer.js","reducers/index.js","actions/types.js","store.js","components/Input.js","actions/weatherActions.js","components/SearchBar.js","components/TableGroup.js","components/Spinner.js","components/WeatherTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","initialState","loading","nodata","weatherData","errors","combineReducers","weather","state","arguments","length","undefined","action","type","Object","objectSpread","payload","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","Input","_ref","name","value","onChange","placeholder","react_default","a","createElement","className","setWeatherDataLoading","SearchBar","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","city","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","defineProperty","target","preventDefault","getWeatherData","onSubmit","components_Input","Component","connect","dispatch","axios","get","concat","then","res","data","catch","err","response","TableGroup","header","date","dailyTemp","tempDiff","tableHeader","map","tableData","index","meanDailyTemp","reduce","acc","curr","toFixed","meanTempDiff","tableFooter","Spinner","src","spinner","alt","style","width","margin","display","WeatherTable","nextProps","keys","receiveNoData","list","push","dt_txt","slice","main","temp","temp_max","temp_min","_this$props$weather","components_TableGroup","App","es","components_SearchBar","components_WeatherTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yQCOlCC,EAAe,CACnBC,SAAS,EACTC,QAAQ,EACRC,YAAa,GACbC,OAAQ,ICRKC,cAAgB,CAC7BC,QDUa,WAAuC,IAA9BC,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBR,EAAcW,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpD,OAAQC,EAAOC,MACb,IEf4B,mBFgB1B,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEJ,YAAaQ,EAAOI,QACpBd,SAAS,EACTC,QAAQ,EACRE,OAAQ,KAGZ,IEzBsB,aF0BpB,OAAOS,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEH,OAAQO,EAAOI,UAGnB,IE5B6B,oBF6B3B,OAAOF,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEN,SAAS,IAGb,IEjC2B,kBFkCzB,OAAOY,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEN,SAAS,EACTC,QAAQ,EACRE,OAAQ,KAGZ,QACE,OAAOG,MGxCPS,EAAa,CAACC,KAiBLC,EATDC,YACZC,EAXmB,GAanBC,YACEC,IAAeC,WAAf,EAAmBP,GANjB,8BCKSQ,EAfD,SAAAC,GAAkD,IAA/CC,EAA+CD,EAA/CC,KAAMC,EAAyCF,EAAzCE,MAAOC,EAAkCH,EAAlCG,SAAUC,EAAwBJ,EAAxBI,YAAajB,EAAWa,EAAXb,KACnD,OACEkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SACEpB,KAAMA,EACNiB,YAAaA,EACbI,UAAU,+BACVP,KAAMA,EACNC,MAAOA,EACPC,SAAUA,uBC4BLM,EAAwB,WACnC,MAAO,CACLtB,KHtC6B,sBIG3BuB,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAxB,OAAAyB,EAAA,EAAAzB,CAAA0B,KAAAJ,IACjBE,EAAAxB,OAAA2B,EAAA,EAAA3B,CAAA0B,KAAA1B,OAAA4B,EAAA,EAAA5B,CAAAsB,GAAAO,KAAAH,KAAMH,KACD7B,MAAQ,CACXoC,KAAM,IAGRN,EAAKO,aAAeP,EAAKO,aAAaC,KAAlBhC,OAAAiC,EAAA,EAAAjC,QAAAiC,EAAA,EAAAjC,CAAAwB,KACpBA,EAAKU,aAAeV,EAAKU,aAAaF,KAAlBhC,OAAAiC,EAAA,EAAAjC,QAAAiC,EAAA,EAAAjC,CAAAwB,KAPHA,4EAUNW,GACXT,KAAKU,SAALpC,OAAAqC,EAAA,EAAArC,CAAA,GACGmC,EAAEG,OAAOzB,KAAOsB,EAAEG,OAAOxB,6CAIjBqB,GACXA,EAAEI,iBACFb,KAAKH,MAAMiB,eAAed,KAAKhC,MAAMoC,uCAIrC,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,wEAIAH,EAAAC,EAAAC,cAAA,QAAMsB,SAAUf,KAAKQ,cACnBjB,EAAAC,EAAAC,cAACuB,EAAD,CACE1B,YAAY,qCACZH,KAAK,OACLd,KAAK,OACLe,MAAOY,KAAKhC,MAAMoC,KAClBf,SAAUW,KAAKK,eAEjBd,EAAAC,EAAAC,cAAA,SACEpB,KAAK,SACLe,MAAM,OACNM,UAAU,4CA3CJuB,aA2DTC,cALS,SAAAlD,GAAK,MAAK,CAChCoC,KAAMpC,EAAMoC,KACZvC,OAAQG,EAAMH,SAKd,CAAEiD,eDzD0B,SAAAV,GAAI,OAAI,SAAAe,GACpCA,EAASxB,KAETyB,IACGC,IADH,sDAAAC,OAE0DlB,EAF1D,6EAIGmB,KAAK,SAAAC,GACJL,EAAS,CACP9C,KHlBwB,mBGmBxBG,QAASgD,EAAIC,SAGhBC,MAAM,SAAAC,GACLR,EAAS,CACP9C,KHzBkB,aG0BlBG,QAASmD,EAAIC,SAASH,YCuCfP,CAGbtB,GCjBaiC,EAjDI,SAAA3C,GAA2C,IAAxC4C,EAAwC5C,EAAxC4C,OAAQC,EAAgC7C,EAAhC6C,KAAMC,EAA0B9C,EAA1B8C,UAAWC,EAAe/C,EAAf+C,SACvCC,EAAcJ,EAAOK,IAAI,SAAAV,GAAI,OAAIlC,EAAAC,EAAAC,cAAA,UAAKgC,KAItCW,EAFO,CAAC,EAAG,EAAG,EAAG,EAAG,GAEHD,IAAI,SAAAE,GACzB,OACE9C,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKsC,EAAKM,IACV9C,EAAAC,EAAAC,cAAA,UAAKuC,EAAUK,IACf9C,EAAAC,EAAAC,cAAA,UAAKwC,EAASI,OAKdC,GACJN,EAAUO,OAAO,SAACC,EAAKC,GAAN,OAAeD,EAAMC,IAAQ,GAC9CC,QAAQ,GAEJC,GACJV,EAASM,OAAO,SAACC,EAAKC,GAAN,OAAgBD,IAAOC,IAAQ,GAC/CC,QAAQ,GAEJE,EACJrD,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBAEFF,EAAAC,EAAAC,cAAA,UAAK6C,GACL/C,EAAAC,EAAAC,cAAA,UAAKkD,IAIT,OACEpD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,uBACfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UAAKyC,IAGP3C,EAAAC,EAAAC,cAAA,aACG2C,EACAQ,uBCzCIC,EAAA,WACb,OACEtD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OACEqD,IAAKC,IACLC,IAAI,aACJC,MAAO,CAAEC,MAAO,QAASC,OAAQ,OAAQC,QAAS,aCDpDC,cACJ,SAAAA,IAAc,IAAAvD,EAAA,OAAAxB,OAAAyB,EAAA,EAAAzB,CAAA0B,KAAAqD,IACZvD,EAAAxB,OAAA2B,EAAA,EAAA3B,CAAA0B,KAAA1B,OAAA4B,EAAA,EAAA5B,CAAA+E,GAAAlD,KAAAH,QACKhC,MAAQ,CACXoC,KAAM,OACN2B,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAC3BC,UAAW,CAAC,EAAG,EAAG,EAAG,EAAG,GACxBC,SAAU,CAAC,EAAG,EAAG,EAAG,EAAG,IANbnC,yFAUYwD,GAMxB,GAJqD,IAAjDhF,OAAOiF,KAAKD,EAAUvF,QAAQF,QAAQK,QACxC8B,KAAKH,MAAM2D,qBAG8BrF,IAAvCmF,EAAUvF,QAAQH,YAAYwC,KAAoB,CACpD,IAAMxC,EAAc0F,EAAUvF,QAAQH,YAEhCwC,EAAOxC,EAAYwC,KAAKjB,KAE1B4C,EAAO,GACPC,EAAY,GACZC,EAAW,GAEfrE,EAAY6F,KAAKtB,IAAI,SAACV,EAAMY,GAM1B,OALIA,EAAQ,IAAM,IAChBN,EAAK2B,KAAKjC,EAAKkC,OAAOC,MAAM,EAAG,KAC/B5B,EAAU0B,KAAKjC,EAAKoC,KAAKC,MACzB7B,EAASyB,MAAMjC,EAAKoC,KAAKE,SAAWtC,EAAKoC,KAAKG,UAAUtB,QAAQ,KAE3D,IAGT1C,KAAKU,SAAS,CACZN,OACA2B,OACAC,YACAC,+CAKG,IAGHmB,EAHGa,EACqBjE,KAAKH,MAAM9B,QAA/BL,EADDuG,EACCvG,QAASC,EADVsG,EACUtG,OAqBjB,OAhBEyF,EADE1F,EACQ6B,EAAAC,EAAAC,cAACoD,EAAD,MAENlF,EACQ4B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,wBAGRH,EAAAC,EAAAC,cAACyE,EAAD,CACEpC,OAAQ,CAAC9B,KAAKhC,MAAMoC,KAAM,OAAQ,aAClC2B,KAAM/B,KAAKhC,MAAM+D,KACjBC,UAAWhC,KAAKhC,MAAMgE,UACtBC,SAAUjC,KAAKhC,MAAMiE,WAO3B1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAAyB0D,aAvEzBnC,aAmFZC,cAJS,SAAAlD,GAAK,MAAK,CAChCD,QAASC,EAAMD,UAKf,CAAEyF,cJ7DyB,WAC3B,MAAO,CACLnF,KH9B2B,qBOuFhB6C,CAGbmC,GCzEac,mLAXX,OACE5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAUzF,MAAOA,GACfY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAC4E,EAAD,MACA9E,EAAAC,EAAAC,cAAC6E,EAAD,eANQrD,aCIEsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtF,EAAAC,EAAAC,cAACqF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5D,KAAK,SAAA6D,GACjCA,EAAaC","file":"static/js/main.4f1ca8be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.8ee7fcb9.gif\";","import {\n  GET_ERRORS,\n  GET_WEATHER_DATA,\n  LOAD_WEATHER_DATA,\n  RECEIVE_NO_DATA,\n} from '../actions/types';\n\nconst initialState = {\n  loading: false,\n  nodata: false,\n  weatherData: {},\n  errors: {},\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_WEATHER_DATA:\n      return {\n        ...state,\n        weatherData: action.payload,\n        loading: false,\n        nodata: false,\n        errors: {},\n      };\n\n    case GET_ERRORS:\n      return {\n        ...state,\n        errors: action.payload,\n      };\n\n    case LOAD_WEATHER_DATA:\n      return {\n        ...state,\n        loading: true,\n      };\n\n    case RECEIVE_NO_DATA:\n      return {\n        ...state,\n        loading: false,\n        nodata: true,\n        errors: {},\n      };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport weatherReducer from './weatherReducer';\n\nexport default combineReducers({\n  weather: weatherReducer,\n});\n","export const GET_ERRORS = 'GET_ERRORS';\nexport const GET_WEATHER_DATA = 'GET_WEATHER_DATA';\nexport const SET_WEATHER_DATA_LOADING = 'SET_WEATHER_DATA_LOADING';\nexport const LOAD_WEATHER_DATA = 'LOAD_WEATHER_DATA';\nexport const RECEIVE_NO_DATA = 'RECEIVE_NO_DATA';\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst devTools =\n  process.env.NODE_ENV === 'development'\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__()\n    : null;\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    devTools\n  )\n);\n\nexport default store;\n","import React from 'react';\n\nconst Input = ({ name, value, onChange, placeholder, type }) => {\n  return (\n    <div className=\"form-group\">\n      <input\n        type={type}\n        placeholder={placeholder}\n        className=\"form-control form-control-lg\"\n        name={name}\n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\nexport default Input;\n","import axios from 'axios';\n\nimport {\n  GET_ERRORS,\n  GET_WEATHER_DATA,\n  LOAD_WEATHER_DATA,\n  RECEIVE_NO_DATA,\n} from './types';\n\n//get weather data using axios\nexport const getWeatherData = city => dispatch => {\n  dispatch(setWeatherDataLoading());\n\n  axios\n    .get(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city},id&mode=json&units=metric&cnt=40&appid=271da6b323b05ebaf2b4aaa0f3378f89`\n    )\n    .then(res => {\n      dispatch({\n        type: GET_WEATHER_DATA,\n        payload: res.data,\n      });\n    })\n    .catch(err => {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data,\n      });\n    });\n};\n\n//receive no data\nexport const receiveNoData = () => {\n  return {\n    type: RECEIVE_NO_DATA,\n  };\n};\n\n//loading the data\nexport const setWeatherDataLoading = () => {\n  return {\n    type: LOAD_WEATHER_DATA,\n  };\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Input from './Input';\nimport { getWeatherData } from '../actions/weatherActions';\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: '',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.getWeatherData(this.state.city);\n  }\n\n  render() {\n    return (\n      <div className=\"form-group\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-6 mx-auto mt-5\">\n              <h3 className=\"text-center\">\n                Ketik nama kota untuk mendapatkan perkiraan cuaca 5&nbsp;hari ke\n                depan\n              </h3>\n              <form onSubmit={this.handleSubmit}>\n                <Input\n                  placeholder=\"contoh: Jakarta, Bandung, Surabaya\"\n                  name=\"city\"\n                  type=\"text\"\n                  value={this.state.city}\n                  onChange={this.handleChange}\n                />\n                <input\n                  type=\"submit\"\n                  value=\"Cari\"\n                  className=\"btn btn-info btn-block mt-4\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  city: state.city,\n  errors: state.errors,\n});\n\nexport default connect(\n  mapStateToProps,\n  { getWeatherData }\n)(SearchBar);\n","import React from 'react';\n\nconst TableGroup = ({ header, date, dailyTemp, tempDiff }) => {\n  const tableHeader = header.map(data => <th>{data}</th>);\n\n  const test = [0, 1, 2, 3, 4];\n\n  const tableData = test.map(index => {\n    return (\n      <tr>\n        <td>{date[index]}</td>\n        <td>{dailyTemp[index]}</td>\n        <td>{tempDiff[index]}</td>\n      </tr>\n    );\n  });\n\n  const meanDailyTemp = (\n    dailyTemp.reduce((acc, curr) => acc + curr) / 5\n  ).toFixed(2);\n\n  const meanTempDiff = (\n    tempDiff.reduce((acc, curr) => +acc + +curr) / 5\n  ).toFixed(2);\n\n  const tableFooter = (\n    <tr>\n      <td>\n        <b>Rata-rata</b>\n      </td>\n      <td>{meanDailyTemp}</td>\n      <td>{meanTempDiff}</td>\n    </tr>\n  );\n\n  return (\n    <div>\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>{tableHeader}</tr>\n        </thead>\n\n        <tbody>\n          {tableData}\n          {tableFooter}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default TableGroup;\n","import React from 'react';\nimport spinner from './spinner.gif';\n\nexport default () => {\n  return (\n    <div>\n      <img\n        src={spinner}\n        alt=\"Loading...\"\n        style={{ width: '200px', margin: 'auto', display: 'block' }}\n      />\n    </div>\n  );\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport TableGroup from './TableGroup';\nimport Spinner from './Spinner';\n\nimport { receiveNoData } from '../actions/weatherActions';\n\nclass WeatherTable extends Component {\n  constructor() {\n    super();\n    this.state = {\n      city: 'Kota',\n      date: ['-', '-', '-', '-', '-'],\n      dailyTemp: [0, 0, 0, 0, 0],\n      tempDiff: [0, 0, 0, 0, 0],\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    //check if any errors\n    if (Object.keys(nextProps.weather.errors).length !== 0) {\n      this.props.receiveNoData();\n    }\n\n    if (nextProps.weather.weatherData.city !== undefined) {\n      const weatherData = nextProps.weather.weatherData;\n\n      const city = weatherData.city.name;\n\n      let date = [];\n      let dailyTemp = [];\n      let tempDiff = [];\n\n      weatherData.list.map((data, index) => {\n        if (index % 8 === 0) {\n          date.push(data.dt_txt.slice(0, 10));\n          dailyTemp.push(data.main.temp);\n          tempDiff.push((data.main.temp_max - data.main.temp_min).toFixed(2));\n        }\n        return 0;\n      });\n\n      this.setState({\n        city,\n        date,\n        dailyTemp,\n        tempDiff,\n      });\n    }\n  }\n\n  render() {\n    const { loading, nodata } = this.props.weather;\n\n    let display;\n\n    if (loading) {\n      display = <Spinner />;\n    } else {\n      if (nodata) {\n        display = <h4 className=\"text-center\">Kota tidak ditemukan</h4>;\n      } else {\n        display = (\n          <TableGroup\n            header={[this.state.city, 'Suhu', 'Perbedaan']}\n            date={this.state.date}\n            dailyTemp={this.state.dailyTemp}\n            tempDiff={this.state.tempDiff}\n          />\n        );\n      }\n    }\n\n    return (\n      <div className=\"weather-table\">\n        <div className=\"form-group\" />\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-6 mx-auto mt-3\">{display}</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  weather: state.weather,\n});\n\nexport default connect(\n  mapStateToProps,\n  { receiveNoData }\n)(WeatherTable);\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './App.css';\n\nimport SearchBar from './components/SearchBar';\nimport WeatherTable from './components/WeatherTable';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"weather-app\">\n          <SearchBar />\n          <WeatherTable />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}